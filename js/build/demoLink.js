!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.demoLink=n())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/demoLink/src/demolinkcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DemoLinkCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./js/ckeditor5_plugins/demoLink/src/utils.js\");\n/**\n * @file\n * Defines the DemoLinkCommand plugin.\n */\n\n\n\n\n/**\n * The demoLink command.\n *\n * Used by the {@link module:demoLink/demoLink~DemoLink} plugin.\n *\n * @extends module:core/command~Command\n */\nclass DemoLinkCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    // Demo link Toolbar button is always enabled.\n    this.isEnabled = true;\n\n    // Init the empty command value.\n    this.value = null;\n\n    // Find the element in the selection.\n    const { selection } = this.editor.model.document;\n    const demoLinkEl = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.findElement)(selection, 'demoLink');\n    if (!demoLinkEl) {\n      return;\n    }\n\n    // Populate command value.\n    this.value = {};\n\n    // Process demoLink attributes (demoLinkUrl & demoLinkClass).\n    for (const [attrKey, attrValue] of demoLinkEl.getAttributes()) {\n      this.value[attrKey] = attrValue;\n    }\n\n    // Process demoLink children (demoLinkText & demoLinkFileExtension).\n    for (const childNode of demoLinkEl.getChildren()) {\n      const childTextNode = childNode.getChild(0);\n      const dataNotEmpty = childTextNode && childTextNode._data;\n      this.value[childNode.name] = dataNotEmpty ? childTextNode._data : '';\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  execute(values) {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n\n      // If a new button is created or an existing one is being edited.\n      var isNew = false;\n\n      // Find an existing demo link if it is being edited.\n      var demoLinkEl = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.findElement)(model.document.selection, 'demoLink');\n\n      // Create new demoLink.\n      if (!demoLinkEl) {\n        demoLinkEl = writer.createElement('demoLink');\n        isNew = true;\n      }\n\n      // Editing the model element and its children to match the form values.\n      this._editElement(writer, demoLinkEl, values);\n\n      // Insert a new button.\n      if (isNew) {\n        model.insertContent(demoLinkEl);\n      }\n\n    });\n  }\n\n  /**\n   * (Re)create a demoLink element using the new values.\n   *\n   * While editing, removes child elements, recreates them\n   * and appends in a proper order.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {module:engine/model/element~Element} modelEl\n   *   demoLink model element.\n   * @param {Array} values\n   *   New values.\n   *\n   * @private\n   */\n  _editElement(writer, modelEl, values) {\n\n    // Filter out non-attribute values.\n    var modelAttrs = Object.fromEntries(\n      Object.entries(values).filter(function ([key, value]) {\n        return _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getDemoLinkModelAttrKeys().includes(key);\n      })\n    );\n\n    modelAttrs['demoLinkClass'] = 'demo-link';\n\n    // Set modelEl attributes.\n    writer.clearAttributes(modelEl);\n    writer.setAttributes(modelAttrs, modelEl);\n\n    // Get modelEl children elements names.\n    const children = [];\n    Array.from(modelEl.getChildren()).forEach((el) => {\n      children.push(el.name);\n    });\n\n    // Get or create child elements.\n    const demoLinkText = this._processChildTextEl(writer, values, children, modelEl, 'demoLinkText');\n    const demoLinkFileExtension = this._processChildTextEl(writer, values, children, modelEl, 'demoLinkFileExtension');\n\n    // Append child element in a proper order.\n    if (demoLinkText) {\n      writer.append(demoLinkText, modelEl);\n    }\n    if (demoLinkFileExtension) {\n      writer.append(demoLinkFileExtension, modelEl);\n    }\n\n  }\n\n  /**\n   * Processes child text elements.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {Array} values\n   *   New values.\n   * @param {Array} children\n   *   demoLink child elements names array.\n   * @param {module:engine/model/element~Element} modelEl\n   *   demoLink model element.\n   * @param {string} childElName\n   *   Processed child element name.\n   *\n   * @returns {null|*}\n   *   Child element to append to modelEl, or null.\n   *\n   * @private\n   */\n  _processChildTextEl(writer, values, children, modelEl, childElName) {\n\n    const childEl = this._processChildElement(\n      writer,\n      values[childElName],\n      children,\n      modelEl,\n      childElName\n    );\n\n    if (childEl) {\n      // Remove existing text if any.\n      const textNode = childEl.getChild(0);\n      if (textNode) {\n        writer.remove(textNode);\n      }\n\n      // Set new text.\n      writer.appendText( values[childElName], childEl );\n      return childEl;\n    }\n\n    return null;\n  }\n\n  /**\n   * Processes any child element.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {string} value\n   *   New values.\n   * @param {Array} children\n   *   demoLink child elements names array.\n   * @param {module:engine/model/element~Element} modelEl\n   *   demoLink model element.\n   * @param {string} childElName\n   *   Processed child element name.\n   *\n   * @returns {null|*}\n   *   Child element to append to modelEl, or null.\n   *\n   * @private\n   */\n  _processChildElement (writer, value, children, modelEl, childElName) {\n\n    // Define an operation.\n    const create = value && !children.includes(childElName);\n    const edit = value && children.includes(childElName);\n    const remove = !value && children.includes(childElName);\n\n    var childEl = null;\n\n    if (create) {\n      childEl = writer.createElement(childElName);\n    } else if (edit || remove) {\n      // Get updated children list to get the correct index.\n      let childrenUpdated = [];\n      Array.from(modelEl.getChildren()).forEach((el) => {\n        childrenUpdated.push(el.name);\n      });\n\n      // Find child element;\n      var childElIndex = childrenUpdated.indexOf(childElName);\n      childEl = modelEl.getChild(childElIndex);\n    }\n\n    // Remove now and re-add later if needed\n    // to comply with the child elements order.\n    if (children.includes(childElName) && childEl) {\n      writer.remove(childEl);\n    }\n\n    if (remove) {\n      return null;\n    } else {\n      return childEl;\n    }\n\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/ckeditor5_plugins/demoLink/src/demolinkcommand.js?")},"./js/ckeditor5_plugins/demoLink/src/demolinkediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DemoLinkEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _demolinkcommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./demolinkcommand */ \"./js/ckeditor5_plugins/demoLink/src/demolinkcommand.js\");\n/**\n * @file\n * Defines the DemoLinkEditing plugin.\n */\n\n/**\n * @module demoLink/DemoLinkEditing\n */\n\n\n\n\n/**\n * The demoLink editing feature.\n *\n * It introduces the 'demoLink' element in the model.\n *\n * @extends module:core/plugin~Plugin\n */\nclass DemoLinkEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n\n    // Attaching the command to the editor.\n    this.editor.commands.add(\n      'demoLink',\n      new _demolinkcommand__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.editor),\n    );\n\n  }\n\n  /**\n   * Registers schema for demoLink and its child elements.\n   *\n   * @private\n   */\n  _defineSchema() {\n    const schema = this.editor.model.schema;\n\n    // demoLink (parent element).\n    schema.register('demoLink', {\n      inheritAllFrom: '$inlineObject',\n      allowAttributes: [\n        'demoLinkUrl',\n\n        // Needed to avoid conflicts with the 'linkClass' model attribute.\n        'demoLinkClass'\n\n      ],\n      allowChildren: [\n        'demoLinkText',\n        'demoLinkFileExtension',\n      ],\n    });\n\n    // Text and file extension (child elements).\n    schema.register('demoLinkText', {\n      allowIn: 'demoLink',\n      isLimit: true,\n      allowContentOf: '$block',\n    });\n    schema.register('demoLinkFileExtension', {\n      allowIn: 'demoLink',\n      isLimit: true,\n      allowContentOf: '$block',\n    });\n\n  }\n\n  /**\n   * Defines converters.\n   */\n  _defineConverters() {\n    const {conversion} = this.editor;\n\n    // demoLink. View -> Model.\n    conversion.for('upcast').elementToElement({\n      view: {\n        name: 'a'\n      },\n      model: (viewElement, {writer}) => {\n\n        // Do not convert if the link does not have the 'demo-link' class.\n        // @todo: set classes: 'demo-link' for the view and convert properly.\n        const classes = viewElement.getAttribute('class');\n        if (!classes) {\n          return null;\n        }\n        if (!classes.split(' ').includes('demo-link')) {\n          return null;\n        }\n\n        var attrs = {\n          'demoLinkUrl': viewElement.getAttribute('href')\n        };\n\n        return writer.createElement( 'demoLink', attrs );\n      }\n    });\n\n    // demoLink. Model -> View.\n    conversion.for('downcast').elementToElement({\n      model: 'demoLink',\n      view: (modelElement, {writer}) => {\n\n        var htmlAttrs = {\n          'class': 'demo-link',\n          'href': modelElement.getAttribute('demoLinkUrl')\n        };\n\n        return writer.createContainerElement('a', htmlAttrs);\n      }\n    });\n\n    // href to demoLinkUrl. View -> Model.\n    conversion.for('upcast').attributeToAttribute({\n      view: {\n        name: 'a',\n        attributes: {\n          ['href']: true\n        }\n      },\n      model: {\n        key: 'demoLinkUrl',\n        value: viewElement => {\n          return viewElement.getAttribute('href');\n        }\n      },\n    });\n\n    // class\" to demoLinkClass. View -> Model.\n    // Needed to avoid conflicts with the 'linkClass' model attribute\n    // bound to the same HTML \"class\" attribute.\n    conversion.for('upcast').attributeToAttribute({\n      view: {\n        name: 'a',\n        attributes: {\n          ['class']: true\n        }\n      },\n      model: {\n        key: 'demoLinkClass',\n        value: viewElement => {\n          return viewElement.getAttribute('class');\n        }\n      },\n    });\n\n    // demoLinkText. View -> Model.\n    conversion.for('upcast').elementToElement({\n      view: {\n        name: 'span',\n        classes: 'text',\n      },\n      model: ( viewElement, { writer } ) => {\n        return writer.createElement('demoLinkText');\n      }\n    });\n\n    // demoLinkText. Model -> View.\n    conversion.for('downcast').elementToElement({\n      model: 'demoLinkText',\n      view: ( modelElement, { writer: viewWriter } ) => {\n        return viewWriter.createContainerElement('span', {class: 'text'});\n      }\n    });\n\n    // demoLinkFileExtension. View -> Model.\n    conversion.for('upcast').elementToElement({\n      view: {\n        name: 'small',\n        classes: 'file-extension',\n      },\n      model: ( viewElement, { writer } ) => {\n        return writer.createElement( 'demoLinkFileExtension');\n      }\n    });\n\n    // demoLinkFileExtension. Model -> View.\n    conversion.for('downcast').elementToElement({\n      model: 'demoLinkFileExtension',\n      view: ( modelElement, { writer: viewWriter } ) => {\n        return viewWriter.createContainerElement('small', {class: 'file-extension'});\n      }\n    });\n\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/ckeditor5_plugins/demoLink/src/demolinkediting.js?")},"./js/ckeditor5_plugins/demoLink/src/demolinkui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DemoLinkUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_demo_link_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../icons/demo-link.svg */ \"./js/icons/demo-link.svg\");\n/* harmony import */ var _ui_demolinkformview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/demolinkformview */ \"./js/ckeditor5_plugins/demoLink/src/ui/demolinkformview.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"./js/ckeditor5_plugins/demoLink/src/utils.js\");\n/**\n * @file\n * Defines the DemoLinkUI plugin.\n */\n\n/**\n * @module demoLink/DemoLinkUI\n */\n\n\n\n\n\n\n\n/**\n * The demoLink UI plugin. It introduces the `'demoLink'` button and the forms.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nclass DemoLinkUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon ];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    // Create the balloon.\n    this._balloon = this.editor.plugins.get( ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon );\n\n    this._addToolbarButton();\n    this.formView = this._createFormView();\n    this._handleSelection();\n  }\n\n  /**\n   * Adds the demoLink toolbar button.\n   *\n   * @private\n   */\n  _addToolbarButton() {\n    const editor = this.editor;\n\n    editor.ui.componentFactory.add('demoLink', (locale) => {\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('demoLink'),\n        icon: _icons_demo_link_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true\n      });\n\n      // Bind button to the command.\n      // The state on the button depends on the command values.\n      const command = editor.commands.get('demoLink');\n      buttonView.bind( 'isEnabled' ).to( command, 'isEnabled' );\n      buttonView.bind( 'isOn' ).to( command, 'value', value => !!value );\n\n      // Execute the command when the button is clicked.\n      this.listenTo(buttonView, 'execute', () =>\n        this._showUI(),\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Creates the form view.\n   *\n   * @returns {FormView}\n   *   The form view instance.\n   *\n   * @private\n   */\n  _createFormView() {\n    const formView = new _ui_demolinkformview__WEBPACK_IMPORTED_MODULE_3__[\"default\"]( this.editor.locale );\n\n    // Form submit handler.\n    this.listenTo( formView, 'submit', () => {\n\n      let values = {\n        demoLinkText: formView.textInputView.fieldView.element.value,\n        demoLinkFileExtension: formView.fileExtensionInputView.fieldView.element.value,\n        demoLinkUrl: formView.urlInputView.fieldView.element.value,\n      };\n\n      this.editor.execute('demoLink', values);\n\n      // Hide the form view after submit.\n      this._hideUI();\n    } );\n\n    // Hide the form view after clicking the \"Cancel\" button.\n    this.listenTo( formView, 'cancel', () => {\n      this._hideUI();\n    } );\n\n\n    // Hide the form view when clicking outside the balloon.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)( {\n      emitter: formView,\n      activator: () => this._balloon.visibleView === formView,\n      contextElements: [ this._balloon.view.element ],\n      callback: () => this._hideUI()\n    } );\n\n    return formView;\n  }\n\n  /**\n   * Adds the {@link #FormView} to the balloon and sets the form values.\n   *\n   * @private\n   */\n  _addFormView() {\n\n    this._balloon.add({\n      view: this.formView,\n      position: this._getBalloonPositionData()\n    });\n\n    const command = this.editor.commands.get('demoLink');\n\n    // Handle text input fields.\n    Object.entries(_utils__WEBPACK_IMPORTED_MODULE_4__.Utils.getModelToInputFormFieldsMapping()).forEach(([modelName, formElName]) => {\n\n      const formEl = this.formView[formElName];\n\n      // Needed to display a placeholder of the elements being focused before.\n      formEl.focus();\n\n      const isEmpty = !command.value || !command.value[modelName] || command.value[modelName] === '';\n\n      // Set URL default value.\n      if (modelName === 'demoLinkUrl' && isEmpty) {\n        formEl.fieldView.element.value = '#';\n        formEl.set('isEmpty', false);\n        return;\n      }\n\n      if (!isEmpty) {\n        formEl.fieldView.element.value = command.value[modelName];\n      }\n      formEl.set('isEmpty', isEmpty);\n\n    });\n\n    // Reset the focus to the first form element.\n    this.formView.focus();\n  }\n\n  /**\n   * Handles the selection specific cases (right before or after the element).\n   *\n   * @private\n   */\n  _handleSelection() {\n    const editor = this.editor;\n\n    this.listenTo(editor.editing.view.document, 'selectionChange', (eventInfo, eventData) => {\n      const selection = editor.model.document.selection;\n\n      let el = selection.getSelectedElement() ?? selection.getFirstRange().getCommonAncestor();\n\n      // The selected element is outside of a demo link.\n      if (!['demoLinkText', 'demoLinkFileExtension'].includes(el.name)) {\n        this._hideUI();\n        return;\n      }\n\n      this._showUI();\n\n      const positionBefore = editor.model.createPositionBefore(el);\n      const positionAfter = editor.model.createPositionAfter(el);\n\n      const position = selection.getFirstPosition();\n\n      // Define which child element will be used for afterTouch;\n      const demoLinkEl = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.findElement)(selection, 'demoLink');\n      var hasFileExtension = false;\n      for (const child of demoLinkEl.getChildren()) {\n        if (child.name === 'demoLinkFileExtension') {\n          hasFileExtension = true;\n          continue;\n        }\n      }\n      const afterTouchChildElName = hasFileExtension ? 'demoLinkFileExtension' : 'demoLinkText';\n\n      const beforeTouch = el.name == 'demoLinkText' && position.isTouching( positionBefore );\n      const afterTouch = el.name == afterTouchChildElName && position.isTouching( positionAfter );\n\n      // Handle the \"border\" selection.\n      if (beforeTouch || afterTouch) {\n        editor.model.change(writer => {\n          writer.setSelection(el.findAncestor('demoLink'), 'on');\n        });\n      }\n\n    });\n  }\n\n  /**\n   * Shows the UI.\n   *\n   * @private\n   */\n  _showUI() {\n    this._addFormView();\n  }\n\n  /**\n   * Hide the UI.\n   *\n   * @private\n   */\n  _hideUI() {\n    const formView = this.formView;\n\n    // Without this a new form contains the old values.\n    if (formView.element) {\n      formView.element.reset();\n    }\n\n    if (this._balloon.hasView(formView)) {\n      this._balloon.remove(formView);\n    }\n\n    // Focus the editing view after closing the form view.\n    this.editor.editing.view.focus();\n  }\n\n  /**\n   * Gets balloon position.\n   *\n   * @returns {{target: (function(): *)}}\n   *\n   * @private\n   */\n  _getBalloonPositionData() {\n    const view = this.editor.editing.view;\n    const viewDocument = view.document;\n    let target = null;\n\n    // Set a target position by converting view selection range to DOM.\n    target = () => view.domConverter.viewRangeToDom(\n      viewDocument.selection.getFirstRange()\n    );\n\n    return {\n      target\n    };\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/ckeditor5_plugins/demoLink/src/demolinkui.js?")},"./js/ckeditor5_plugins/demoLink/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _demolinkediting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./demolinkediting */ "./js/ckeditor5_plugins/demoLink/src/demolinkediting.js");\n/* harmony import */ var _demolinkui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./demolinkui */ "./js/ckeditor5_plugins/demoLink/src/demolinkui.js");\n/**\n * @file\n * Defines the demoLink plugin.\n */\n\n/**\n * @module demoLink/DemoLink\n */\n\n\n\n\n\n/**\n * The DemoLink plugin.\n *\n * This is a "glue" plugin that loads\n * the {@link module:demoLink/DemoLinkEditing~DemoLinkEditing DemoLink editing feature}\n * and {@link module:demoLink/DemoLinkUI~DemoLinkUI DemoLink UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nclass DemoLink extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  /**\n   * @inheritdoc\n   */\n  static get requires() {\n    return [_demolinkediting__WEBPACK_IMPORTED_MODULE_1__["default"], _demolinkui__WEBPACK_IMPORTED_MODULE_2__["default"]];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return \'demoLink\';\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  DemoLink,\n});\n\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/ckeditor5_plugins/demoLink/src/index.js?')},"./js/ckeditor5_plugins/demoLink/src/ui/demolinkformview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file\n * Defines the FormView View class.\n */\n\n/**\n * @module demoLink/ui/DemoLinkFormView\n */\n\n\n\n\n/**\n * The demoLink FormView class.\n *\n * This view displays an editing form for {@link module:demoLink/demoLink~DemoLink}.\n *\n * @extends module:ui/view~View\n */\nclass FormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n\n  /**\n   * @inheritDoc\n   */\n  constructor( locale ) {\n    super( locale );\n\n    // Text inputs.\n    this.textInputView = this._createInput('Text', { required: true });\n    this.fileExtensionInputView = this._createInput('File extension');\n    this.urlInputView = this._createInput('URL', {required: true});\n\n    // Create the save button.\n    this.saveButtonView = this._createButton(\n      'Save', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.icons.check, 'ck-button-save'\n    );\n\n    // Triggers the submit event on entire form when clicked.\n    this.saveButtonView.type = 'submit';\n\n    // Create the cancel button.\n    this.cancelButtonView = this._createButton(\n      'Cancel', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.icons.cancel, 'ck-button-cancel'\n    );\n\n    // Delegate ButtonView#execute to FormView#cancel.\n    this.cancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n    this.childViewsCollection = this.createCollection([\n      this.textInputView,\n      this.fileExtensionInputView,\n      this.urlInputView,\n      this.saveButtonView,\n      this.cancelButtonView\n    ]);\n\n    this.setTemplate( {\n      tag: 'form',\n      attributes: {\n        class: [ 'ck', 'ck-demo-link-form' ],\n\n        // https://github.com/ckeditor/ckeditor5-image/issues/40\n        tabindex: '-1'\n      },\n      children: this.childViewsCollection\n    } );\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n\n    // Submit the form when the user clicked the save button\n    // or pressed enter in the input.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)( {\n      view: this\n    } );\n  }\n\n  /**\n   * Focus on the first form element.\n   */\n  focus() {\n    this.childViewsCollection.first.focus();\n  }\n\n  /**\n   * Creates an input field.\n   *\n   * @param {string} label\n   *   Input field label.\n   * @param {object} options\n   *   Options.\n   *\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n   *   The labeled field view class instance.\n   *\n   * @private\n   */\n  _createInput(label, options = {}) {\n    const labeledFieldView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(this.locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n    labeledFieldView.label = label;\n\n    // Sets the required attribute when needed.\n    if (options.required && options.required === true) {\n      labeledFieldView.fieldView.extendTemplate({\n        attributes: {\n          required: true,\n        }\n      });\n    }\n\n    return labeledFieldView;\n  }\n\n  /**\n   * Creates button.\n   *\n   * @param {string} label\n   *   Button label.\n   * @param {module:ui/icon/iconview~IconView} icon\n   *   Button icon.\n   * @param {string} className\n   *   HTML class.\n   *\n   * @returns {module:ui/button/buttonview~ButtonView}\n   *   The button view class instance.\n   *\n   * @private\n   */\n  _createButton( label, icon, className ) {\n    const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView();\n\n    button.set({\n      label,\n      icon,\n      tooltip: true,\n      class: className\n    });\n\n    return button;\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/ckeditor5_plugins/demoLink/src/ui/demolinkformview.js?")},"./js/ckeditor5_plugins/demoLink/src/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Utils: () => (/* binding */ Utils),\n/* harmony export */   findElement: () => (/* binding */ findElement)\n/* harmony export */ });\n/**\n * @file\n * Defines a helper class and functions.\n */\n\n/**\n * Finds a closest element of a model name in a given selection.\n *\n * @param {module:engine/model/selection~Selection} modelSelection\n *   Model selection.\n *\n * @param {string} modelName\n *   Model name of a searched element.\n *\n * @returns {module:engine/model/element~Element}\n *   Found element.\n */\nfunction findElement(modelSelection, modelName) {\n  const selectedElement = modelSelection.getSelectedElement();\n  if (selectedElement && selectedElement.name == modelName) {\n    return selectedElement;\n  } else {\n    return modelSelection\n      .getFirstRange()\n      .getCommonAncestor()\n      .findAncestor(modelName);\n  }\n}\n\n/**\n * A helper class.\n *\n * Defines model elements and attributes used in the {@link module:demoLink/demoLink~DemoLink plugin}.\n */\nclass Utils {\n\n  /**\n   * Model attributes corresponding to HTML attributes.\n   */\n  static htmlAttrs = {\n    'demoLinkUrl': 'href',\n    // 'demoLinkClass': 'class',\n  };\n\n  /**\n   * Model element to form element mapping.\n   *\n   * Maps a model element to a respective form element\n   * in the {@link module:demoLink/ui/DemoLinkFormView~FormView}\n   *\n   */\n  static modelToFormFieldMapping = {\n    demoLinkText: 'textInputView',\n    demoLinkFileExtension: 'fileExtensionInputView',\n    demoLinkUrl: 'urlInputView',\n  };\n\n  /**\n   * Gets model element to form element mapping.\n   */\n  static getModelToInputFormFieldsMapping() {\n    return this.modelToFormFieldMapping;\n  }\n\n  /**\n   * Gets demoLink model attributes keys.\n   *\n   * @returns {string[]}\n   *   Array of model attributes names.\n   */\n  static getDemoLinkModelAttrKeys() {\n    return Object.keys(this.htmlAttrs);\n  }\n\n}\n\n\n\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/ckeditor5_plugins/demoLink/src/utils.js?")},"./js/icons/demo-link.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" standalone=\\"no\\"?>\\n<!DOCTYPE svg PUBLIC \\"-//W3C//DTD SVG 20010904//EN\\"\\n \\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\\">\\n<svg version=\\"1.0\\" xmlns=\\"http://www.w3.org/2000/svg\\"\\n width=\\"55.000000pt\\" height=\\"54.000000pt\\" viewBox=\\"0 0 55.000000 54.000000\\"\\n preserveAspectRatio=\\"xMidYMid meet\\">\\n\\n<g transform=\\"translate(0.000000,54.000000) scale(0.100000,-0.100000)\\"\\nfill=\\"#000000\\" stroke=\\"none\\">\\n<path d=\\"M201 514 c-28 -35 -26 -69 4 -99 51 -51 135 -18 135 53 0 45 -30 72\\n-79 72 -31 0 -44 -6 -60 -26z\\"/>\\n<path d=\\"M415 379 c-51 -29 -59 -76 -20 -114 30 -30 64 -32 99 -4 64 50 -8\\n157 -79 118z\\"/>\\n<path d=\\"M233 210 c-79 -32 -57 -150 28 -150 82 0 110 108 38 145 -32 17 -35\\n17 -66 5z\\"/>\\n<path d=\\"M420 213 c-56 -21 -70 -96 -24 -132 50 -40 114 -18 130 44 8 31 -17\\n72 -52 85 -28 11 -32 11 -54 3z\\"/>\\n<path d=\\"M25 185 c-40 -39 -31 -89 18 -110 79 -33 144 56 84 113 -31 29 -72\\n28 -102 -3z\\"/>\\n</g>\\n</svg>\\n");\n\n//# sourceURL=webpack://CKEditor5.demoLink/./js/icons/demo-link.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.demoLink/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.demoLink/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/demoLink/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));
